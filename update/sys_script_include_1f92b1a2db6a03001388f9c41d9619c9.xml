<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_tieoy_dyn_wf.DynamicWorkflowUtil</api_name>
        <client_callable>false</client_callable>
        <description>Master script include containing needed functions for dynamic workflow handling</description>
        <name>DynamicWorkflowUtil</name>
        <script><![CDATA[var DynamicWorkflowUtil = Class.create();
DynamicWorkflowUtil.prototype = {
    initialize: function(task,_gs,_workflow) {
    	this.task = task; 
    	this._wf = _workflow;
		
    },
	
	ERROR_EVENT_CI_NAME: gs.getProperty("x_tieoy_dyn_wf.dyn_wf.ci.name", ""),
	
	// Get configuration based on the number
    getConfiguration: function(number) {
    	var conf = new GlideRecord('x_tieoy_dyn_wf_conf');
		conf.addQuery('number', number);
		conf.query();

		if (conf.getRowCount() == 1) {
		    conf.next();
		    gs.info('DWF - getConfiguration: Found configuration named: ' + conf.name);

			//Create configuration execution record
			var confExecution = this._createConfigurationExecution(conf.sys_id);
			gs.info('DWF - getConfiguration: Configuration execution record: ' + confExecution.number);
			
			//Initialize scratchpad MAPPING Object
			this._wf.scratchpad['MAPPING'] = {};
			
			//Return Configuration sys_id, active, and created configuration execution sys_id
		    var ret = {
		    	sys_id : conf.sys_id+"",
		    	active : conf.active+"",
		    	conf_execution_id : confExecution.sys_id+""
		    };
			
			//If definition is not active, create event and update state fo Failed (function createEVMEvent will do this)
			if( conf.active == false ){
				var message = 'Automation Execution failed: Configuration (' + number + ') is not Active.';
				var severity = 4;
				this.createEVMEvent(message,severity,confExecution.sys_id);
			}
			
			return ret;
		}
		else {
			//Throw message into log and create event
		    gs.error('DWF - getConfiguration: Could not found configuration with number: ' + number);
			var message = "Dynamic workflow configuration " + number + " does not exist.";
			var severity = 4;
			this.createEVMEvent(message,severity);
		    return false;
		}
    },
	
	//Get ordered set of configuration for definition sys_id
	getConfigurationSet: function(conf_sys_id,conf_execution_id){
		var m2m = new GlideRecord('x_tieoy_dyn_wf_m2m_item2conf');
		m2m.addQuery('dynamic_workflow_configuration', conf_sys_id);
		m2m.addQuery('dynamic_workflow_item.workflow', '!=', '');
		m2m.orderBy('order');
		m2m.query();

		if (m2m.getRowCount() == 0) {
			gs.error('DWF - getConfigurationSet: Could not found any workflow item in configuration number ' + conf.number);
			return false;
		}

		//Create ordered array with item names and vars
		var arr_items = [];

		while (m2m.next()) {
			//Get parameters
			gs.info('DWF - getConfigurationSet: Workflow item: ' + m2m.dynamic_workflow_item.name);
			
		    arr_items.push({
		    	order     : m2m.order+"",
		    	item_id	  : m2m.dynamic_workflow_item+"",
		    	workflow  : m2m.dynamic_workflow_item.workflow+"",
				m2m_id	  : m2m.sys_id+"",
		    	variables : {}
		    });
		
			//Create workflow execution record - for item
			this._createWorkflowExecution(conf_execution_id,m2m.dynamic_workflow_item.sys_id);
						
		}
		
		//Update workflow execution record state
		this._updateConfigurationExecutionState(conf_execution_id,'In Progress');
		
		return arr_items;

	},

	loadItemWFVariables: function(item,conf_execution_id) {
		
		//Create ordered array with item names and vars
		var WFParamList = [];
		var vars = {};
		
		//Load MAPPING var from scratchpad
		var MAPPING = this._wf.scratchpad.MAPPING;
		gs.info('DWF - DEBUG - MAPPING keys: ' + Object.keys(MAPPING));

		// Find 'Input' type parameters for the workflow item + fill in values
		var defaultParameters = new GlideRecord('x_tieoy_dyn_wf_param');
		defaultParameters.addQuery('dynamic_workflow_item', item.item_id);
		defaultParameters.addQuery('type', 'Input');
		defaultParameters.query();
		
		while (defaultParameters.next()) {
			//gs.info('Default workflow parameters: ' + defaultParameters.name + ' = ' + defaultParameters.default_value + ' type: ' + defaultParameters.type);
			var parameters = new GlideRecord('x_tieoy_dyn_wf_param_conf');
			parameters.addQuery('dynamic_workflow_m2m_item2conf', item.m2m_id);
			parameters.addQuery('dynamic_workflow_parameter', defaultParameters.sys_id);
			parameters.query();

			var evaluator = new GlideScopedEvaluator();
			var variable = '';

			if (parameters.getRowCount() == 1) {					
				//move to parameter
				parameters.next();
				
				//variable = evaluator.evaluateScript(parameters, 'value', null);
				variable = evaluator.evaluateScript(parameters, 'value', MAPPING);
				gs.info('DWF - loadItemWFVariables: Workflow parameter - CUSTOM: Parameter Number: '+parameters.number + '; Item(' + item.item_id + ') Parameter name: ' + parameters.dynamic_workflow_parameter.name + ' = ' + parameters.value + ' type: ' + defaultParameters.type + '; value: ' + variable);

			} else {
					
				//variable = evaluator.evaluateScript(defaultParameters, 'default_value', null);
				variable = evaluator.evaluateScript(defaultParameters, 'default_value', MAPPING);
				gs.info('DWF - loadItemWFVariables: Workflow parameter - DEFAULT: Item(' + item.item_id + ') Parameter name: ' + defaultParameters.name + ' = ' + defaultParameters.default_value + ' type: ' + defaultParameters.type + '; value: ' + variable);
	
			}

			//Validate variable value for requirement - if null or empty string -> event created
			this._validateParameterFulfilment(defaultParameters,variable);

			//Set variables
			vars[defaultParameters.variable_name] = variable+"";

			//Create workflow parameter value record
			gs.info('DWF - loadItemWFVariables: Create WF Parameter value record: ' + conf_execution_id +", "+ defaultParameters.sys_id +", "+ variable);
			this._createWorkflowParameterValue(conf_execution_id,defaultParameters.sys_id,variable);
				
			//Make a link to execution


		}

		WFParamList.push(vars);

		return WFParamList;

	},

	
	storeWorkflowOutputs: function(item,conf_execution_id,flow_output) {
		outputParameters = new GlideRecord('x_tieoy_dyn_wf_param');
		outputParameters.addQuery('dynamic_workflow_item', item.item_id);
		outputParameters.addQuery('type', "Output");
		outputParameters.query();

		if(outputParameters.getRowCount() < 1) {
			gs.info('DWF - storeWorkflowOutputs: Could not found outputs');
			return false;
		}
		
		while (outputParameters.next()) {
			//Read for a value due to item can be used multiple times, and we want to store value into separate variable within MAPPING object, by default they are stored into default value
			var parameters = new GlideRecord('x_tieoy_dyn_wf_param_conf');
			parameters.addQuery('dynamic_workflow_m2m_item2conf', item.m2m_id);
			parameters.addQuery('dynamic_workflow_parameter', outputParameters.sys_id);
			parameters.query();

			var output_value;
			//Get where to store output for MAPPING object for later evaluation during loading parameters within function loadItemWFVariables
			if (parameters.getRowCount() == 1) {
				//Output parameter has defined different store than default
				parameters.next();
				
				output_value = parameters.value+"";
				
			} else {
				//Output parameter should be stored under default value into MAPPING
				output_value = outputParameters.default_value+"";
			}
			
			//read variable output name + default value
			var item_output_var_name = outputParameters.variable_name+"";
			
			var variable = '';
			//read workflow output variable value
			if( gs.nil(flow_output[item_output_var_name]) ) {
				variable = '';
			}else{
				variable = flow_output[item_output_var_name];	
			}
			
			//Check if output variable is object or array - both is defined as object - due to validator is not able to handle these ones directly
			if ( typeof variable === 'object' ) {
				variable = JSON.stringify(flow_output[item_output_var_name]);
			}

			gs.info('DWF - storeWorkflowOutputs: Output - Default value: ' + output_value + '; Variable Name: ' + item_output_var_name + '; flow output variable value: '+ variable);

			//Store variable into scratchpad
			this._wf.scratchpad.MAPPING[output_value] = variable;
			gs.info('DWF - storeWorkflowOutputs: MAPPING['+ output_value + ']: ' + this._wf.scratchpad.MAPPING[output_value]);
			
			//Create workflow parameter value record
			this._createWorkflowParameterValue(conf_execution_id,outputParameters.sys_id,variable);
		}
	},
	
	createEVMEvent: function(description, severity,confExecution_id){
		//any future logic for message key to be able create unique events? eg Configuration Number + ExecutionNumber 
		var addEvent = new GlideRecord('em_event');
		addEvent.initialize();
		addEvent.short_description = 'Dynamic workflow failure';
		addEvent.description = description;
		//addEvent.source = 'ServiceNOW';
		//addEvent.metric_name = 'Failure';
		//addEvent.type = 'Workflow failure';
		//addEvent.resource = 'Worfklow';
		addEvent.severity = severity;
		addEvent.node = this.ERROR_EVENT_CI_NAME;
		addEvent.cmdb_ci = this.ERROR_EVENT_CI_NAME;
		addEvent.insert(); 
		
		//Set configuration execution state to failed, if configuration execution id not preset - state will not be changed to failed.
		if( ! gs.nil(confExecution_id) ){
			this._updateConfigurationExecutionState(confExecution_id,'Failed');
		}		
		
		return addEvent;
	},
	
	/**
	* getIfConditionConfigurationSet - gets Dynamic Workflow Items which are IF conditions (have not assigned any workflow).
	* 
	* @param {String} conf_sys_id - The sys_id of Dynamic Workflow Configuration.
	* 
	* returns {Array} - each item of the array is an object with parameters:
						{
							order : ${ order value of Dynamic Workflow Item },
							item_id : ${ sys_id value of Dynamic Workflow Item }
						}
	*/
	
	getIfConditionConfigurationSet : function(conf_sys_id){
		var m2m = new GlideRecord('x_tieoy_dyn_wf_m2m_item2conf');
		m2m.addQuery('dynamic_workflow_configuration', conf_sys_id);
		m2m.addQuery('dynamic_workflow_item.workflow', '');
		m2m.orderBy('order');
		m2m.query();

		//Create ordered array with item names and vars
		var arr_items = [];

		while (m2m.next()) {
			//Get parameters			
		    arr_items.push({
		    	order     : m2m.order+"",
		    	item_id	  : m2m.dynamic_workflow_item+"",
				m2m_id	  : m2m.sys_id+""
		    });		
		}
		
		return arr_items;
	},

	/**
	* isExcludedItem - checks whether tested Dynamic Workflow Item is excluded or not.
	*
	* @param {Array} condition_set - The list of Dynamic Workflow Items which are IF conditions (have not assigned any workflow). They're the same items which are get from getIfConditionConfigurationSet function.
	* @param {String} configuration_item_order - The order of tested Dynamic Workflow Item.
	* @param {String} configuration_sys_id - The sys_id of Dynamic Workflow Configuration.
	* 
	* returns {Boolean} - If tested Dynamic Workflow Item is excluded returns true if not returns false.
	*/
	
	isExcludedItem : function(condition_set, configuration_item_order){
		
		//Initial values
		var excluded_range = {
			start : 0,
			end : 0
		};
		var evaluator = new GlideScopedEvaluator();
		
		//Load MAPPING var from scratchpad
		var MAPPING = this._wf.scratchpad.MAPPING;

		for(var index = 0; index < condition_set.length; index++){

			var conf = condition_set[index];

			if(configuration_item_order >= conf.order){

				var if_statement = {};
				var required = false; //Initial value of 'required' flag. It's getting true if 'else' part exists and it's validated, otherwise it's false.

				// Find 'Input' type parameters for the workflow item + fill in values
				// Getting default parameters of Dynamic Workflow Item.
				var defaultParameters = new GlideRecord("x_tieoy_dyn_wf_param");
				defaultParameters.addQuery('dynamic_workflow_item', conf.item_id);
				defaultParameters.addQuery('type', 'Input');
				defaultParameters.query();

				while(defaultParameters.next()){

					var variable_name = defaultParameters.variable_name.toString();
					
					// Getting parameters of Dynamic Workflow Configuration.
					var parameters = new GlideRecord('x_tieoy_dyn_wf_param_conf');
					parameters.addQuery('dynamic_workflow_m2m_item2conf', conf.m2m_id);
					parameters.addQuery('dynamic_workflow_parameter', defaultParameters.sys_id);
					parameters.query();

					// Checking whether the (Dynamic Workflow Item) default parameters are overwritten by the (Dynamic Workflow Configuration) parameters.
					// If they are overwritten then use the (Dynamic Workflow Configuration) parameter otherwise are used default parameters.
					if (parameters.next()) {

						if(variable_name == 'condition'){
							if_statement['condition'] = evaluator.evaluateScript(parameters, 'value', MAPPING);
						}

						// Validating 'else' part
						if(variable_name == 'else'){
							if_statement['else'] = parameters.value + '';

							if(defaultParameters.required.toString() == 'true' && if_statement['else'] != ''){
								required = true;
							}
						}

						if(variable_name == 'end'){
							if_statement['end'] = parameters.value + '';
						}

					} else {

						if(variable_name == 'condition'){
							if_statement['condition'] = evaluator.evaluateScript(defaultParameters, 'default_value', MAPPING);
						}

						// Validating 'else' part
						if(variable_name == 'else'){
							if_statement['else'] = defaultParameters.default_value + '';

							if(defaultParameters.required.toString() == 'true' && if_statement['else'] != ''){
								required = true;
							}
						}

						if(variable_name == 'end'){
							if_statement['end'] = defaultParameters.default_value + '';
						}
					}
				}

				// Setting appropriate excluded range and checking that tested item is excluded.
				// Two cases:
				// 1. 'else' part exists ('required' is true)
				// 2. There is no 'else' part ('required' is false)
				
				if(required){

					if(if_statement['condition']){
						excluded_range.start = Number(if_statement['else']) + 1;
						excluded_range.end = if_statement['end'];
					} else {
						excluded_range.start = conf.order;
						excluded_range.end = if_statement['else'];
					}

					if(configuration_item_order >= excluded_range.start && configuration_item_order <= excluded_range.end){
						return true;
					}

				} else {

					excluded_range.start = conf.order;
					excluded_range.end = if_statement['end'];

					if(if_statement['condition']){

						if(configuration_item_order > excluded_range.end){
							return true;
						}

					} else {

						if(configuration_item_order >= excluded_range.start && configuration_item_order <= excluded_range.end){
							return true;
						}

					}
				}
			}
		}

		return false; //item is executed, because it's not in range of any IF condition
	},
	
	_createConfigurationExecution: function(conf_id) {

		var confExecution = new GlideRecord('x_tieoy_dyn_wf_exec');
		confExecution.initialize();
		confExecution.dynamic_workflow_configuration = conf_id;
		confExecution.insert();
		return confExecution;
	},
	
	_createWorkflowParameterValue: function(confExecution_id,defaultParam_id,variable) {
		var paramValue = new GlideRecord('x_tieoy_dyn_wf_param_value');
	    paramValue.initialize();
	    paramValue.value = variable;
	    paramValue.dynamic_workflow_execution = confExecution_id;
	    paramValue.dynamic_workflow_parameter = defaultParam_id;
	    paramValue.insert();
	    return paramValue;
	},

	_createWorkflowExecution: function(confExecution_id,dyn_wf_id) {
		var item2exec = new GlideRecord('x_tieoy_dyn_wf_m2m_item2exec');
        item2exec.initialize();
        item2exec.dynamic_workflow_execution = confExecution_id;
        item2exec.dynamic_workflow_item = dyn_wf_id;
        item2exec.insert();
			
        return item2exec;
	},
	
	_updateConfigurationExecutionState: function(confExecution_id,state){
		var confExecution = new GlideRecord('x_tieoy_dyn_wf_exec');
		confExecution.get(confExecution_id);
		confExecution.state = state;
		confExecution.update();
		return confExecution;
	},
	
	_validateParameterFulfilment: function(gr_parameter,variable_value){
		//check for parameter fullfilment
		//if parameter is required and and value is null of empty string - not valid 
		if( gr_parameter.required == true && ( variable_value == '' || variable_value == null ) ){
			var message = "Parameter "+ gr_parameter.name+" is required but is null or empty string.";
			var severity = 4;
			this.createEVMEvent(message,severity);
			
			return false;				
		}		
		return true;
	},

	type: 'DynamicWorkflowUtil'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin.ivanepav</sys_created_by>
        <sys_created_on>2017-11-23 11:36:49</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>1f92b1a2db6a03001388f9c41d9619c9</sys_id>
        <sys_mod_count>72</sys_mod_count>
        <sys_name>DynamicWorkflowUtil</sys_name>
        <sys_package display_value="Dynamic workflow" source="x_tieoy_dyn_wf">e473a9eedbe603001388f9c41d961988</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Dynamic workflow">e473a9eedbe603001388f9c41d961988</sys_scope>
        <sys_update_name>sys_script_include_1f92b1a2db6a03001388f9c41d9619c9</sys_update_name>
        <sys_updated_by>admin.xxgodzip</sys_updated_by>
        <sys_updated_on>2018-03-20 09:55:50</sys_updated_on>
    </sys_script_include>
</record_update>
